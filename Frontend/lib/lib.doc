/lib
  ├── /api
  │   ├── /client.ts              # Axios client setup, interceptors, and API base configuration
  │   ├── /services
  │   │   ├── auth.ts             # Authentication (login, register, refresh token, etc.)
  │   │   ├── orders.ts           # Order-related API calls
  │   │   ├── products.ts         # Product-related API calls
  │   │   ├── reviews.ts          # Reviews-related API calls
  │   │   ├── vendors.ts          # Vendor-related API calls
  │   │   ├── wishlist.ts         # Wishlist-related API calls
  │   │   └── base.ts             # A base service with common API methods (GET, POST, PUT, DELETE)
  │   ├── /hooks
  │   │   ├── useAuth.ts          # Custom hook for authentication-related data
  │   │   ├── useOrders.ts        # Custom hook for orders management
  │   │   ├── useProducts.ts      # Custom hook for managing products
  │   │   ├── useReviews.ts       # Custom hook for reviews management
  │   │   ├── useVendors.ts       # Custom hook for managing vendor data
  │   │   ├── useWishlist.ts      # Custom hook for managing wishlist data
  │   │   └── useBase.ts          # Custom hook for base service methods
  │   ├── /types
  │   │   ├── auth.ts             # Types related to authentication (e.g., login, register)
  │   │   ├── orders.ts           # Types for order data
  │   │   ├── products.ts         # Types for product data
  │   │   ├── reviews.ts          # Types for review data
  │   │   ├── vendors.ts          # Types for vendor data
  │   │   ├── wishlist.ts         # Types for wishlist data
  │   │   ├── responses.ts        # Types for API responses
  │   │   ├── common.ts           # Common utility types used across multiple services
  │   │   ├── index.ts            # Index file for exporting all types
  │   ├── /utils
  │   │   ├── axios.ts            # Axios instance configuration
  │   │   ├── error-handler.ts    # Error handling utility for API errors
  │   │   ├── request-interceptor.ts # Request interceptor setup
  │   │   ├── response-interceptor.ts # Response interceptor setup
  │   │   ├── storage.ts          # LocalStorage or sessionStorage utility for token management
  │   │   ├── constants.ts        # Constants used in the API (e.g., base URL, headers)
  │   │   ├── validation.ts       # Utility functions for API validation
  │   │   ├── format.ts           # Utility functions for data formatting before sending requests
  │   │   ├── cn.ts               # Utility for handling language and localization
  │   │   ├── errors.ts           # Global error handling utilities for the app
  │   │   ├── seo.ts              # Utility functions for SEO optimization (meta tags, keywords, etc.)
  │   │   ├── metadata.ts         # Metadata management utility (title, description, etc.)
  │   │   └── performance.ts      # Performance-related utilities (e.g., API response timing)
  ├── /config
  │   ├── config.ts               # Configuration file (e.g., base API URL, auth-related settings)
  │   └── constants.ts            # Global constants for API and services
  ├── /utils
  │   ├── format.ts               # Data formatting utilities (can be used across app)
  │   ├── validation.ts           # Validation logic (can be used across app)
  │   └── error-handler.ts        # Global error handler for various parts of the app
  └── index.ts                     # Entry point for the `lib/` folder


/lib/api
This directory handles all API-related functionality. It includes client setup, services for specific features, hooks to interact with the API, types for API data, and utility files to manage API behaviors.

/client.ts
Purpose: The main configuration file for Axios, which is used to set up the Axios client globally for making HTTP requests.
Key Components:
Base URL for API requests.
Axios interceptors for request and response handling (adding tokens, handling errors, etc.).
Common configuration settings (headers, timeout, etc.).
/services
This directory contains individual service files, each responsible for interacting with the backend API for specific features. Each file will typically contain methods for CRUD operations related to its domain (e.g., authentication, orders, products).

auth.ts: Manages API calls related to user authentication (login, registration, token refresh, etc.).
orders.ts: Handles API calls for order-related data (creating, fetching, updating, and deleting orders).
products.ts: Manages interactions with product data (creating, updating, fetching, deleting).
reviews.ts: Manages product reviews (submitting, fetching, deleting reviews).
vendors.ts: Handles API interactions related to vendor data (registration, management, etc.).
wishlist.ts: Handles API calls related to user wishlists (adding/removing products, fetching wishlist items).
base.ts: A base class or utility with common API methods (GET, POST, PUT, DELETE). This avoids code repetition and centralizes the logic for making API requests.
/hooks
Custom React hooks to encapsulate the logic for interacting with the services and managing state. Hooks abstract the API calls and allow components to easily fetch, mutate, and store data.

useAuth.ts: A hook to manage authentication-related state (e.g., user login status, token management).
useOrders.ts: A hook for managing order data, fetching order information, and handling order updates.
useProducts.ts: A hook for interacting with product data, such as fetching product lists or product details.
useReviews.ts: A hook for handling product reviews, including submission and fetching.
useVendors.ts: A hook to manage vendor-related data and handle vendor actions.
useWishlist.ts: A hook for managing a user's wishlist state (e.g., adding/removing items).
useBase.ts: A general hook that leverages the base service methods from base.ts, making it reusable across multiple services.
/types
Contains TypeScript types for API request and response data, ensuring type safety across the application.

auth.ts: Defines types related to authentication data (e.g., login request body, login response, user data).
orders.ts: Defines types for order data (e.g., order structure, order status).
products.ts: Types for product-related data (e.g., product attributes, product response format).
reviews.ts: Defines types for review data (e.g., review format, review submission).
vendors.ts: Defines types for vendor data (e.g., vendor registration, vendor information).
wishlist.ts: Types for wishlist data (e.g., items in the wishlist, wishlist update format).
responses.ts: Contains generic types for API responses (e.g., success/failure structure).
common.ts: A collection of shared types that can be used across multiple services (e.g., pagination, API errors).
index.ts: Exports all types from the /types directory to make it easier to import them elsewhere.
/utils
Utility files to provide common functionalities that are needed throughout the app. These files help modularize common behaviors (e.g., handling errors, managing storage, formatting data).

axios.ts: Contains the Axios instance configuration, including any necessary Axios setup or custom configuration for headers or timeouts.
error-handler.ts: Centralized error handling for API calls. This file processes and formats API error responses, ensuring consistent error messages or retry logic.
request-interceptor.ts: Adds interceptors for requests, such as adding authentication tokens to headers before sending requests.
response-interceptor.ts: Handles response logic for common scenarios (e.g., refreshing tokens when expired, dealing with error responses).
storage.ts: Utility functions for managing browser storage (e.g., localStorage, sessionStorage). This file is used for managing the authentication tokens or any other persistent data.
constants.ts: Contains constants used throughout the application, such as API endpoints, status codes, error messages, etc.
validation.ts: Provides functions for validating API request data (e.g., ensuring required fields are present in request bodies).
format.ts: Utility functions for formatting data before sending it to the API (e.g., date formatting, currency formatting).
cn.ts: Handles language or localization functionality, including managing translation strings or switching between languages.
errors.ts: Handles global error management, including custom error messages or actions for various error scenarios.
seo.ts: Provides functions for SEO optimization (e.g., managing meta tags, dynamic page titles).
metadata.ts: Utility for managing dynamic page metadata, including things like title, description, and other metadata for SEO.
performance.ts: Includes performance-related utilities, such as measuring API response times or managing app load times.
/config
This folder stores the app configuration settings, which might need to be environment-specific (e.g., different API URLs for development and production).

config.ts: Holds application-wide configuration values, such as the base API URL, environment-specific settings, and other constants related to API integration.
constants.ts: Defines constants that are needed for API requests, such as API version, common headers, or any other shared values used across the app.
/utils (Global Utility Functions)
A shared utilities directory for common functions that can be used throughout the application, across various contexts (e.g., data formatting, error handling).

format.ts: Includes reusable functions for formatting data (e.g., formatting numbers, dates, or strings).
validation.ts: Provides reusable validation functions for data validation in API calls, form submissions, etc.
error-handler.ts: A global error handler that can be used across various parts of the app, not just in API requests, ensuring consistent error processing.
index.ts
Purpose: This file serves as the entry point for the /lib folder. It collects and exports relevant functionality from various files and directories, making it easier to import everything in one place from the root of the application. For instance, it could export all services, types, hooks, or utility functions so that other parts of the app can simply import from /lib/api.
